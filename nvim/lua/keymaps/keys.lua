local wk = require("which-key")

wk.add({
  -- Filesystem Group
  { "<leader>f", group = "Filesystem" },
  { "<leader>ff", "<cmd>Telescope find_files<CR>", desc = "Find Files" },
  { "<leader>fe", "<cmd>Neotree toggle<CR>", desc = "Toggle Neo-tree" },
  { "<leader>fo", "<cmd>Neotree reveal<CR>", desc = "Reveal File in Neo-tree" },
  { "<leader>fb", "<cmd>Telescope file_browser<CR>", desc = "File Browser" },
  { "<leader>fr", "<cmd>Telescope oldfiles<CR>", desc = "Recent Files" },
  { "<leader>fg", "<cmd>Telescope live_grep<CR>", desc = "Live Grep" },
  { "<leader>fn", "<cmd>enew<CR>", desc = "New File" },
  { "<leader>fw", "<cmd>w<CR>", desc = "Write File" },
  { "<leader>fd", "<cmd>call delete(expand('%')) | bdelete!<CR>", desc = "Delete File" },
  { "<leader>fp", "<cmd>echo expand('%:p')<CR>", desc = "Print File Path" },
  { "<leader>fc", "<cmd>cd %:p:h<CR>", desc = "Change Directory to File" },
  { "<leader>fs", "<cmd>Telescope grep_string<CR>", desc = "Search String" },

  -- Buffer Management
  { "<leader>b", group = "Buffers" },
  { "<leader>bb", "<cmd>Telescope buffers<CR>", desc = "List Buffers" },
  { "<leader>bd", "<cmd>bdelete<CR>", desc = "Delete Buffer" },
  { "<leader>bn", "<cmd>bnext<CR>", desc = "Next Buffer" },
  { "<leader>bp", "<cmd>bprevious<CR>", desc = "Previous Buffer" },
  { "<leader>bf", "<cmd>bfirst<CR>", desc = "First Buffer" },
  { "<leader>bl", "<cmd>blast<CR>", desc = "Last Buffer" },
  { "<leader>bs", "<cmd>w<CR>", desc = "Save Buffer" },
  { "<leader>ba", "<cmd>bufdo bd<CR>", desc = "Delete All Buffers" },
  { "<leader>bo", "<cmd>%bd|e#|bd#<CR>", desc = "Delete Other Buffers" },
  { "<leader>br", "<cmd>e!<CR>", desc = "Reload Buffer" },

  -- Window Management
  { "<leader>w", group = "Windows" },
  { "<leader>wh", "<cmd>wincmd h<CR>", desc = "Move Left" },
  { "<leader>wj", "<cmd>wincmd j<CR>", desc = "Move Down" },
  { "<leader>wk", "<cmd>wincmd k<CR>", desc = "Move Up" },
  { "<leader>wl", "<cmd>wincmd l<CR>", desc = "Move Right" },
  { "<leader>ws", "<cmd>split<CR>", desc = "Horizontal Split" },
  { "<leader>wv", "<cmd>vsplit<CR>", desc = "Vertical Split" },
  { "<leader>wc", "<cmd>close<CR>", desc = "Close Window" },
  { "<leader>wo", "<cmd>only<CR>", desc = "Close Other Windows" },
  { "<leader>w=", "<cmd>wincmd =<CR>", desc = "Equal Size" },
  { "<leader>wm", "<cmd>wincmd _<CR>", desc = "Maximize Height" },

  -- Search & Replace
  { "<leader>s", group = "Search" },
  { "<leader>sf", "<cmd>Telescope find_files<CR>", desc = "Find Files" },
  { "<leader>sg", "<cmd>Telescope live_grep<CR>", desc = "Live Grep" },
  { "<leader>sb", "<cmd>Telescope current_buffer_fuzzy_find<CR>", desc = "Buffer Search" },
  { "<leader>sh", "<cmd>Telescope help_tags<CR>", desc = "Help Tags" },
  { "<leader>sc", "<cmd>Telescope commands<CR>", desc = "Commands" },
  { "<leader>sk", "<cmd>Telescope keymaps<CR>", desc = "Keymaps" },
  { "<leader>sr", "<cmd>Telescope resume<CR>", desc = "Resume Search" },
  { "<leader>ss", "<cmd>Telescope grep_string<CR>", desc = "Search String" },
  { "<leader>sw", "<cmd>Telescope grep_string<CR>", desc = "Search Word" },
  { "<leader>so", "<cmd>Telescope oldfiles<CR>", desc = "Recent Files" },

  -- Git Operations
  { "<leader>g", group = "Git" },
  { "<leader>gs", "<cmd>Telescope git_status<CR>", desc = "Git Status" },
  { "<leader>gc", "<cmd>Telescope git_commits<CR>", desc = "Git Commits" },
  { "<leader>gb", "<cmd>Telescope git_branches<CR>", desc = "Git Branches" },
  { "<leader>gf", "<cmd>Telescope git_files<CR>", desc = "Git Files" },
  { "<leader>gh", "<cmd>Telescope git_bcommits<CR>", desc = "Buffer Commits" },
  { "<leader>gl", "<cmd>Git log --oneline<CR>", desc = "Git Log" },
  { "<leader>gd", "<cmd>Gvdiffsplit<CR>", desc = "Git Diff" },
  { "<leader>ga", "<cmd>Git add .<CR>", desc = "Git Add All" },
  { "<leader>gp", "<cmd>Git push<CR>", desc = "Git Push" },
  { "<leader>gu", "<cmd>Git pull<CR>", desc = "Git Pull" },

  -- LSP Operations
  { "<leader>l", group = "LSP" },
  { "<leader>lr", "<cmd>lua vim.lsp.buf.rename()<CR>", desc = "Rename" },
  { "<leader>la", "<cmd>lua vim.lsp.buf.code_action()<CR>", desc = "Code Action" },
  { "<leader>ld", "<cmd>Telescope diagnostics<CR>", desc = "Diagnostics" },
  { "<leader>lf", "<cmd>lua vim.lsp.buf.format()<CR>", desc = "Format" },
  { "<leader>lh", "<cmd>lua vim.lsp.buf.hover()<CR>", desc = "Hover" },
  { "<leader>ls", "<cmd>Telescope lsp_document_symbols<CR>", desc = "Document Symbols" },
  { "<leader>lw", "<cmd>Telescope lsp_workspace_symbols<CR>", desc = "Workspace Symbols" },
  { "<leader>le", "<cmd>lua vim.diagnostic.open_float()<CR>", desc = "Show Diagnostics" },
  { "<leader>ln", "<cmd>lua vim.diagnostic.goto_next()<CR>", desc = "Next Diagnostic" },
  { "<leader>lp", "<cmd>lua vim.diagnostic.goto_prev()<CR>", desc = "Prev Diagnostic" },

  -- Terminal
  { "<leader>t", group = "Terminal" },
  { "<leader>tt", "<cmd>terminal<CR>", desc = "Open Terminal" },
  { "<leader>tv", "<cmd>vsplit | terminal<CR>", desc = "Vertical Terminal" },
  { "<leader>th", "<cmd>split | terminal<CR>", desc = "Horizontal Terminal" },
  { "<leader>tf", "<cmd>ToggleTerm direction=float<CR>", desc = "Floating Terminal" },
  { "<leader>tg", "<cmd>lua _lazygit_toggle()<CR>", desc = "Lazygit" },
  { "<leader>tn", "<cmd>lua _node_toggle()<CR>", desc = "Node" },
  { "<leader>tp", "<cmd>lua _python_toggle()<CR>", desc = "Python" },

  -- Quick Actions
  { "<leader>q", group = "Quick Actions" },
  { "<leader>qq", "<cmd>qa<CR>", desc = "Quit All" },
  { "<leader>qw", "<cmd>wqa<CR>", desc = "Save and Quit All" },
  { "<leader>qf", "<cmd>qa!<CR>", desc = "Force Quit All" },
  { "<leader>qr", "<cmd>source %<CR>", desc = "Reload Config" },
  { "<leader>qc", "<cmd>e ~/.config/nvim/init.lua<CR>", desc = "Edit Config" },
  { "<leader>ql", "<cmd>Lazy<CR>", desc = "Lazy Plugin Manager" },
  { "<leader>qm", "<cmd>Mason<CR>", desc = "Mason LSP Manager" },
  { "<leader>qh", "<cmd>checkhealth<CR>", desc = "Check Health" },

  -- Project Management
  { "<leader>p", group = "Project" },
  { "<leader>pf", "<cmd>Telescope find_files<CR>", desc = "Find Project Files" },
  { "<leader>pg", "<cmd>Telescope live_grep<CR>", desc = "Search in Project" },
  { "<leader>pr", "<cmd>Telescope oldfiles cwd_only=true<CR>", desc = "Recent Project Files" },
  { "<leader>pb", "<cmd>Telescope git_branches<CR>", desc = "Project Branches" },
  { "<leader>pt", "<cmd>TodoTelescope<CR>", desc = "Project TODOs" },
  { "<leader>pp", "<cmd>Telescope projects<CR>", desc = "Switch Project" },
  { "<leader>pa", "<cmd>ProjectRoot<CR>", desc = "Find Project Root" },
  { "<leader>pe", "<cmd>Neotree reveal<CR>", desc = "Explore Project" },
  { "<leader>pc", "<cmd>cd %:p:h<CR>", desc = "Change to File Directory" },
  { "<leader>pw", "<cmd>pwd<CR>", desc = "Show Working Directory" },

  -- Session Management
  { "<leader>S", group = "Sessions" },
  { "<leader>Ss", "<cmd>SessionSave<CR>", desc = "Save Session" },
  { "<leader>Sl", "<cmd>SessionLoad<CR>", desc = "Load Session" },
  { "<leader>Sd", "<cmd>SessionDelete<CR>", desc = "Delete Session" },
  { "<leader>Sr", "<cmd>SessionRestore<CR>", desc = "Restore Last Session" },
  { "<leader>Sf", "<cmd>Telescope session-lens search_session<CR>", desc = "Find Sessions" },
  { "<leader>Sn", "<cmd>SessionSave <CR>", desc = "New Session" },
  { "<leader>Sa", "<cmd>SessionLoadLast<CR>", desc = "Load Last Session" },
  { "<leader>Sc", "<cmd>SessionStop<CR>", desc = "Stop Session Recording" },

  -- Refactoring
  { "<leader>r", group = "Refactor" },
  { "<leader>rr", "<cmd>lua vim.lsp.buf.rename()<CR>", desc = "Rename Symbol" },
  { "<leader>re", "<cmd>Refactor extract<CR>", desc = "Extract Function", mode = {"n", "x"} },
  { "<leader>rf", "<cmd>Refactor extract_to_file<CR>", desc = "Extract to File", mode = {"n", "x"} },
  { "<leader>rv", "<cmd>Refactor extract_var<CR>", desc = "Extract Variable", mode = {"n", "x"} },
  { "<leader>ri", "<cmd>Refactor inline_var<CR>", desc = "Inline Variable", mode = {"n", "x"} },
  { "<leader>rb", "<cmd>Refactor extract_block<CR>", desc = "Extract Block" },
  { "<leader>rc", "<cmd>lua vim.lsp.buf.code_action()<CR>", desc = "Code Actions" },
  { "<leader>ro", "<cmd>OrganizeImports<CR>", desc = "Organize Imports" },
  { "<leader>rs", "<cmd>SymbolsOutline<CR>", desc = "Symbols Outline" },
  { "<leader>rp", "<cmd>Telescope lsp_references<CR>", desc = "Find References" },

  -- Themes & UI
  { "<leader>T", group = "Themes & UI" },
  -- Theme Selection with Themery
  { "<leader>Tt", group = "Theme Selection" },
  { "<leader>Ttt", "<cmd>Themery<CR>", desc = "Theme Picker (Themery)" },
  { "<leader>Tts", "<cmd>Telescope colorscheme<CR>", desc = "Select Colorscheme (Telescope)" },
  { "<leader>Ttr", "<cmd>lua require('themery').reload()<CR>", desc = "Reload Themery Config" },
  { "<leader>Ttl", "<cmd>lua require('themery').list()<CR>", desc = "List Available Themes" },
  -- Quick Theme Shortcuts
  { "<leader>Ttd", "<cmd>colorscheme default<CR>", desc = "Default Theme" },
  { "<leader>Ttn", "<cmd>colorscheme nord<CR>", desc = "Nord Theme" },
  { "<leader>Ttc", "<cmd>colorscheme catppuccin<CR>", desc = "Catppuccin Theme" },
  { "<leader>Tto", "<cmd>colorscheme onedark<CR>", desc = "OneDark Theme" },
  { "<leader>Ttg", "<cmd>colorscheme gruvbox<CR>", desc = "Gruvbox Theme" },
  { "<leader>Ttk", "<cmd>colorscheme tokyonight<CR>", desc = "Tokyo Night Theme" },
  -- UI Toggles
  { "<leader>Tu", group = "UI Toggles" },
  { "<leader>Tun", "<cmd>set number!<CR>", desc = "Toggle Line Numbers" },
  { "<leader>Tur", "<cmd>set relativenumber!<CR>", desc = "Toggle Relative Numbers" },
  { "<leader>Tuw", "<cmd>set wrap!<CR>", desc = "Toggle Word Wrap" },
  { "<leader>Tus", "<cmd>set spell!<CR>", desc = "Toggle Spell Check" },
  { "<leader>Tuc", "<cmd>ColorizerToggle<CR>", desc = "Toggle Colorizer" },
  { "<leader>Tui", "<cmd>IndentBlanklineToggle<CR>", desc = "Toggle Indent Lines" },
  { "<leader>Tuf", "<cmd>set foldcolumn=auto<CR>", desc = "Toggle Fold Column" },
  { "<leader>Tuz", "<cmd>ZenMode<CR>", desc = "Toggle Zen Mode" },
  { "<leader>Tut", "<cmd>Twilight<CR>", desc = "Toggle Twilight" },
  -- Background & Transparency
  { "<leader>Tb", group = "Background" },
  { "<leader>Tbd", "<cmd>set background=dark<CR>", desc = "Dark Background" },
  { "<leader>Tbl", "<cmd>set background=light<CR>", desc = "Light Background" },
  { "<leader>Tbt", "<cmd>TransparentToggle<CR>", desc = "Toggle Transparency" },

  -- Configuration & Troubleshooting
  { "<leader>c", group = "Config & Debug" },
  -- Config Files
  { "<leader>cc", group = "Config Files" },
  { "<leader>ccv", "<cmd>e $MYVIMRC<CR>", desc = "Edit Neovim Config" },
  { "<leader>ccl", "<cmd>e ~/.config/nvim/lua/<CR>", desc = "Edit Lua Config" },
  { "<leader>ccp", "<cmd>e ~/.config/nvim/lua/plugins/<CR>", desc = "Edit Plugins" },
  { "<leader>cck", "<cmd>e ~/.config/nvim/lua/keymaps/keys.lua<CR>", desc = "Edit Keymaps" },
  { "<leader>ccs", "<cmd>source %<CR>", desc = "Source Current File" },
  { "<leader>ccr", "<cmd>source $MYVIMRC<CR>", desc = "Reload Config" },
  -- Troubleshooting
  { "<leader>ct", group = "Troubleshooting" },
  { "<leader>cth", "<cmd>checkhealth<CR>", desc = "Check Health" },
  { "<leader>ctm", "<cmd>messages<CR>", desc = "Show Messages" },
  { "<leader>ctc", "<cmd>messages clear<CR>", desc = "Clear Messages" },
  { "<leader>ctl", "<cmd>LspLog<CR>", desc = "LSP Log" },
  { "<leader>cti", "<cmd>LspInfo<CR>", desc = "LSP Info" },
  { "<leader>ctr", "<cmd>LspRestart<CR>", desc = "Restart LSP" },
  { "<leader>ctd", "<cmd>lua vim.diagnostic.open_float()<CR>", desc = "Show Diagnostics" },
  { "<leader>ctn", "<cmd>Telescope notify<CR>", desc = "Show Notifications" },
  { "<leader>ctp", "<cmd>Lazy profile<CR>", desc = "Plugin Profile" },
  { "<leader>cts", "<cmd>StartupTime<CR>", desc = "Startup Time" },
  -- Plugin Management
  { "<leader>cp", group = "Plugin Management" },
  { "<leader>cpv", "<cmd>Lazy<CR>", desc = "View Plugins" },
  { "<leader>cpu", "<cmd>Lazy update<CR>", desc = "Update Plugins" },
  { "<leader>cpi", "<cmd>Lazy install<CR>", desc = "Install Plugins" },
  { "<leader>cpc", "<cmd>Lazy clean<CR>", desc = "Clean Plugins" },
  { "<leader>cps", "<cmd>Lazy sync<CR>", desc = "Sync Plugins" },
  { "<leader>cpr", "<cmd>Lazy reload<CR>", desc = "Reload Plugins" },
  { "<leader>cph", "<cmd>Lazy help<CR>", desc = "Plugin Help" },
  { "<leader>cpl", "<cmd>Lazy log<CR>", desc = "Plugin Log" },
  { "<leader>cpm", "<cmd>Mason<CR>", desc = "Mason LSP Manager" },
  -- Logs & Debug
  { "<leader>cd", group = "Logs & Debug" },
  { "<leader>cdl", "<cmd>edit ~/.local/state/nvim/lsp.log<CR>", desc = "Open LSP Log" },
  { "<leader>cdn", "<cmd>edit ~/.local/state/nvim/nvim.log<CR>", desc = "Open Neovim Log" },
  { "<leader>cdt", "<cmd>lua vim.print(vim.tbl_keys(vim.lsp.get_active_clients()))<CR>", desc = "Active LSP Clients" },
  { "<leader>cdb", "<cmd>lua vim.print(vim.api.nvim_list_bufs())<CR>", desc = "List Buffers" },
  { "<leader>cdw", "<cmd>lua vim.print(vim.api.nvim_list_wins())<CR>", desc = "List Windows" },
  { "<leader>cds", "<cmd>lua vim.print(vim.fn.serverlist())<CR>", desc = "Server List" },
  { "<leader>cdo", "<cmd>lua vim.print(vim.opt)<CR>", desc = "Show Options" },
  { "<leader>cde", "<cmd>lua vim.print(vim.env)<CR>", desc = "Show Environment" },

  -- Utilities
  { "<leader>u", group = "Utilities" },
  { "<leader>uh", "<cmd>nohlsearch<CR>", desc = "Clear Highlights" },
  { "<leader>up", "<cmd>set paste!<CR>", desc = "Toggle Paste Mode" },
  { "<leader>ut", "<cmd>set expandtab!<CR>", desc = "Toggle Tabs/Spaces" },
  { "<leader>uc", "<cmd>lua vim.fn.setreg('+', vim.fn.expand('%:p'))<CR>", desc = "Copy File Path" },
  { "<leader>ur", "<cmd>edit!<CR>", desc = "Reload File" },
  { "<leader>us", "<cmd>setlocal spell! spelllang=en_us<CR>", desc = "Toggle Spellcheck" },
  { "<leader>uf", "<cmd>lua vim.lsp.buf.format()<CR>", desc = "Format Buffer" },
  { "<leader>uw", "<cmd>StripWhitespace<CR>", desc = "Strip Whitespace" },
})
